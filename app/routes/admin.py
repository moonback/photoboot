from fastapi import APIRouter, HTTPException, Depends, Query, Request
from fastapi.responses import FileResponse
from loguru import logger
from typing import List, Optional
import os
import json
from pathlib import Path
from datetime import datetime
import shutil
import time

from ..admin.auth import admin_auth
from ..models import LoginRequest, LoginResponse, LogoutResponse

router = APIRouter(prefix="/admin", tags=["administration"])


async def get_current_admin(request: Request) -> Optional[dict]:
    """D√©pendance pour r√©cup√©rer l'utilisateur admin actuel"""
    try:
        # R√©cup√©rer le token depuis les cookies
        session_token = request.cookies.get("session_token")
        
        if session_token:
            session_data = admin_auth.validate_session(session_token)
            if session_data:
                return session_data
        
        # R√©cup√©rer le token depuis les headers Authorization
        auth_header = request.headers.get("Authorization")
        if auth_header and auth_header.startswith("Bearer "):
            token = auth_header[7:]  # Enlever "Bearer "
            session_data = admin_auth.validate_session(token)
            if session_data:
                return session_data
        
        return None
        
    except Exception as e:
        logger.error(f"Erreur lors de la validation de la session: {e}")
        return None


# Endpoint pour compter les photos
@router.get("/photos/count")
async def get_photos_count(current_admin: dict = Depends(get_current_admin)):
    """R√©cup√®re le nombre total de photos"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        uploads_dir = Path("uploads")
        if not uploads_dir.exists():
            return {"count": 0}
        
        # Compter les fichiers d'images
        image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp'}
        count = 0
        for file_path in uploads_dir.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                count += 1
        
        return {"count": count}
        
    except Exception as e:
        logger.error(f"Erreur lors du comptage des photos: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors du comptage des photos")


# Endpoint pour lister les photos
@router.get("/photos")
async def get_photos(current_admin: dict = Depends(get_current_admin)):
    """R√©cup√®re la liste des photos"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        uploads_dir = Path("uploads")
        if not uploads_dir.exists():
            return {"photos": []}
        
        # Lister les fichiers d'images
        image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp'}
        photos = []
        
        for file_path in uploads_dir.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                stat = file_path.stat()
                photos.append({
                    "filename": file_path.name,
                    "size": f"{stat.st_size / 1024:.1f} KB",
                    "date": datetime.fromtimestamp(stat.st_mtime).strftime("%d/%m/%Y %H:%M")
                })
        
        # Trier par date de modification (plus r√©cent en premier)
        photos.sort(key=lambda x: x["date"], reverse=True)
        
        return {"photos": photos}
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des photos: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration des photos")


# Endpoint pour supprimer une photo
@router.delete("/photos/{filename}")
async def delete_photo(filename: str, current_admin: dict = Depends(get_current_admin)):
    """Supprime une photo"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        file_path = Path("uploads") / filename
        
        # V√©rifier que le fichier existe et est dans le dossier uploads
        if not file_path.exists() or not file_path.is_file():
            raise HTTPException(status_code=404, detail="Photo non trouv√©e")
        
        # V√©rifier que le fichier est bien dans le dossier uploads
        if not str(file_path.resolve()).startswith(str(Path("uploads").resolve())):
            raise HTTPException(status_code=400, detail="Chemin de fichier invalide")
        
        # Supprimer le fichier
        file_path.unlink()
        
        logger.info(f"Photo supprim√©e: {filename} par {current_admin.get('username')}")
        return {"success": True, "message": "Photo supprim√©e avec succ√®s"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur lors de la suppression de la photo {filename}: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la suppression de la photo")


# Endpoint pour l'activit√© r√©cente
@router.get("/activity")
async def get_recent_activity(current_admin: dict = Depends(get_current_admin)):
    """R√©cup√®re l'activit√© r√©cente"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        # Simuler une activit√© r√©cente (√† remplacer par une vraie impl√©mentation)
        activities = [
            {
                "icon": "üì∏",
                "action": "Photo prise",
                "description": "Nouvelle photo captur√©e",
                "timestamp": datetime.now().strftime("%H:%M")
            },
            {
                "icon": "üë§",
                "action": "Connexion admin",
                "description": f"Connexion de {current_admin.get('username')}",
                "timestamp": datetime.now().strftime("%H:%M")
            },
            {
                "icon": "üíæ",
                "action": "Sauvegarde",
                "description": "Sauvegarde automatique effectu√©e",
                "timestamp": datetime.now().strftime("%H:%M")
            }
        ]
        
        return {"activities": activities}
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration de l'activit√©: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration de l'activit√©")


# Endpoint pour les logs syst√®me
@router.get("/logs")
async def get_logs(
    level: str = Query("ALL", description="Niveau de log √† filtrer"),
    current_admin: dict = Depends(get_current_admin)
):
    """R√©cup√®re les logs syst√®me"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        logs_dir = Path("logs")
        if not logs_dir.exists():
            return {"logs": []}
        
        # Chercher le fichier de log le plus r√©cent
        log_files = list(logs_dir.glob("*.log"))
        if not log_files:
            return {"logs": []}
        
        # Prendre le fichier le plus r√©cent
        latest_log = max(log_files, key=lambda x: x.stat().st_mtime)
        
        logs = []
        try:
            with open(latest_log, 'r', encoding='utf-8') as f:
                for line in f.readlines()[-100:]:  # Derni√®res 100 lignes
                    line = line.strip()
                    if line:
                        # Parser la ligne de log (format basique)
                        if " - " in line:
                            timestamp_part, rest = line.split(" - ", 1)
                            if " - " in rest:
                                level_part, message = rest.split(" - ", 1)
                                log_level = level_part.strip()
                                
                                # Filtrer par niveau si demand√©
                                if level == "ALL" or level.upper() in log_level.upper():
                                    logs.append({
                                        "timestamp": timestamp_part.strip(),
                                        "level": log_level,
                                        "message": message.strip()
                                    })
                        else:
                            # Format simple
                            logs.append({
                                "timestamp": datetime.now().strftime("%H:%M:%S"),
                                "level": "INFO",
                                "message": line
                            })
        except Exception as e:
            logger.error(f"Erreur lors de la lecture du fichier de log: {e}")
        
        # Retourner les logs dans l'ordre chronologique
        logs.reverse()
        return {"logs": logs}
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des logs: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration des logs")


# Endpoint pour effacer les logs
@router.post("/logs/clear")
async def clear_logs(current_admin: dict = Depends(get_current_admin)):
    """Efface tous les logs"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        logs_dir = Path("logs")
        if not logs_dir.exists():
            return {"success": True, "message": "Aucun log √† effacer"}
        
        # Effacer tous les fichiers .log
        cleared_count = 0
        for log_file in logs_dir.glob("*.log"):
            try:
                log_file.unlink()
                cleared_count += 1
            except Exception as e:
                logger.error(f"Erreur lors de la suppression de {log_file}: {e}")
        
        logger.info(f"Logs effac√©s par {current_admin.get('username')}: {cleared_count} fichiers")
        return {"success": True, "message": f"{cleared_count} fichiers de log effac√©s"}
        
    except Exception as e:
        logger.error(f"Erreur lors de l'effacement des logs: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de l'effacement des logs")


# Endpoint pour exporter les logs
@router.get("/logs/export")
async def export_logs(current_admin: dict = Depends(get_current_admin)):
    """Exporte les logs en fichier texte"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        logs_dir = Path("logs")
        if not logs_dir.exists():
            raise HTTPException(status_code=404, detail="Aucun log disponible")
        
        # Chercher le fichier de log le plus r√©cent
        log_files = list(logs_dir.glob("*.log"))
        if not log_files:
            raise HTTPException(status_code=404, detail="Aucun fichier de log trouv√©")
        
        latest_log = max(log_files, key=lambda x: x.stat().st_mtime)
        
        # Cr√©er un fichier d'export temporaire
        export_file = Path("logs") / f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        try:
            with open(latest_log, 'r', encoding='utf-8') as source, \
                 open(export_file, 'w', encoding='utf-8') as target:
                target.write(f"Export des logs - {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                target.write(f"Export√© par: {current_admin.get('username')}\n")
                target.write("=" * 50 + "\n\n")
                target.write(source.read())
            
            # Retourner le fichier
            return FileResponse(
                export_file,
                media_type='text/plain',
                filename=f"photobooth_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            )
            
        finally:
            # Nettoyer le fichier temporaire
            if export_file.exists():
                export_file.unlink()
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur lors de l'export des logs: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de l'export des logs")


# Endpoint pour red√©marrer le syst√®me
@router.post("/system/restart")
async def restart_system(current_admin: dict = Depends(get_current_admin)):
    """Red√©marre le syst√®me (simulation)"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        logger.info(f"Demande de red√©marrage par {current_admin.get('username')}")
        
        # Ici, vous pourriez impl√©menter un vrai red√©marrage
        # Pour l'instant, on simule juste
        
        return {"success": True, "message": "Red√©marrage en cours..."}
        
    except Exception as e:
        logger.error(f"Erreur lors de la demande de red√©marrage: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la demande de red√©marrage")


# Endpoint pour la sauvegarde du syst√®me
@router.post("/system/backup")
async def backup_system(current_admin: dict = Depends(get_current_admin)):
    """Cr√©e une sauvegarde du syst√®me"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        logger.info(f"Demande de sauvegarde par {current_admin.get('username')}")
        
        # Cr√©er un dossier de sauvegarde
        backup_dir = Path("backups")
        backup_dir.mkdir(exist_ok=True)
        
        # Cr√©er un nom de fichier unique
        backup_name = f"photobooth_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        backup_path = backup_dir / backup_name
        
        # Cr√©er la sauvegarde (simulation)
        try:
            # Copier les dossiers importants
            if Path("uploads").exists():
                shutil.copytree("uploads", backup_path / "uploads", dirs_exist_ok=True)
            
            if Path("config").exists():
                shutil.copytree("config", backup_path / "config", dirs_exist_ok=True)
            
            # Cr√©er un fichier d'information
            info_file = backup_path / "backup_info.txt"
            with open(info_file, 'w', encoding='utf-8') as f:
                f.write(f"Sauvegarde cr√©√©e le {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                f.write(f"Cr√©√©e par: {current_admin.get('username')}\n")
                f.write("Contenu: uploads, config\n")
            
            # Cr√©er l'archive ZIP
            shutil.make_archive(str(backup_path), 'zip', backup_path)
            zip_path = Path(f"{backup_path}.zip")
            
            # Nettoyer le dossier temporaire
            shutil.rmtree(backup_path)
            
            # Retourner le fichier ZIP
            return FileResponse(
                zip_path,
                media_type='application/zip',
                filename=f"{backup_name}.zip"
            )
            
        finally:
            # Nettoyer le fichier ZIP temporaire
            if zip_path.exists():
                zip_path.unlink()
        
    except Exception as e:
        logger.error(f"Erreur lors de la cr√©ation de la sauvegarde: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la cr√©ation de la sauvegarde")


# Endpoint pour vider le cache
@router.post("/system/cache/clear")
async def clear_cache(current_admin: dict = Depends(get_current_admin)):
    """Vide le cache syst√®me"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        logger.info(f"Demande de vidage du cache par {current_admin.get('username')}")
        
        # Ici, vous pourriez impl√©menter un vrai vidage de cache
        # Pour l'instant, on simule juste
        
        return {"success": True, "message": "Cache vid√© avec succ√®s"}
        
    except Exception as e:
        logger.error(f"Erreur lors du vidage du cache: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors du vidage du cache")


# Endpoint pour terminer toutes les sessions
@router.post("/sessions/terminate-all")
async def terminate_all_sessions(current_admin: dict = Depends(get_current_admin)):
    """Termine toutes les sessions actives"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        # Nettoyer toutes les sessions
        terminated_count = admin_auth.cleanup_expired_sessions()
        
        logger.info(f"Toutes les sessions termin√©es par {current_admin.get('username')}: {terminated_count} sessions")
        return {"success": True, "message": f"{terminated_count} sessions termin√©es"}
        
    except Exception as e:
        logger.error(f"Erreur lors de la terminaison des sessions: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la terminaison des sessions")


# Endpoint pour terminer une session sp√©cifique
@router.delete("/sessions/{username}")
async def terminate_session(username: str, current_admin: dict = Depends(get_current_admin)):
    """Termine une session sp√©cifique"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        # Chercher et terminer la session de l'utilisateur
        terminated = False
        for token, session_data in admin_auth.active_sessions.items():
            if session_data.get("username") == username:
                del admin_auth.active_sessions[token]
                terminated = True
                break
        
        if terminated:
            logger.info(f"Session de {username} termin√©e par {current_admin.get('username')}")
            return {"success": True, "message": f"Session de {username} termin√©e"}
        else:
            return {"success": False, "message": f"Aucune session trouv√©e pour {username}"}
        
    except Exception as e:
        logger.error(f"Erreur lors de la terminaison de la session de {username}: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la terminaison de la session")





# Endpoint pour les sessions actives
@router.get("/sessions")
async def get_active_sessions(current_admin: dict = Depends(get_current_admin)):
    """R√©cup√®re les sessions actives"""
    if not current_admin:
        raise HTTPException(status_code=401, detail="Non authentifi√©")
    
    try:
        sessions = []
        current_time = time.time()
        
        for token, session_data in admin_auth.active_sessions.items():
            if current_time < session_data["expires_at"]:
                sessions.append({
                    "username": session_data["username"],
                    "login_time": datetime.fromtimestamp(session_data["login_time"]).strftime("%d/%m/%Y %H:%M:%S"),
                    "expires_at": datetime.fromtimestamp(session_data["expires_at"]).strftime("%d/%m/%Y %H:%M:%S"),
                    "remaining_time": max(0, session_data["expires_at"] - current_time)
                })
        
        return {"sessions": sessions}
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des sessions: {e}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration des sessions")
