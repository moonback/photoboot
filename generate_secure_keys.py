#!/usr/bin/env python3
"""
Script de g√©n√©ration de cl√©s s√©curis√©es pour Photobooth
Utilisez ce script pour g√©n√©rer des cl√©s s√©curis√©es en production
"""

import secrets
import string
import hashlib
import base64
from pathlib import Path

def generate_secret_key(length: int = 64) -> str:
    """G√©n√®re une cl√© secr√®te al√©atoire"""
    alphabet = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def generate_bcrypt_salt() -> str:
    """G√©n√®re un salt bcrypt s√©curis√©"""
    return base64.b64encode(secrets.token_bytes(16)).decode('utf-8')

def generate_jwt_secret() -> str:
    """G√©n√®re un secret JWT s√©curis√©"""
    return base64.b64encode(secrets.token_bytes(32)).decode('utf-8')

def generate_redis_password() -> str:
    """G√©n√®re un mot de passe Redis s√©curis√©"""
    return secrets.token_urlsafe(32)

def hash_password(password: str) -> str:
    """Hash un mot de passe avec bcrypt"""
    import bcrypt
    salt = bcrypt.gensalt(rounds=12)
    return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')

def main():
    print("üîê G√©n√©ration de cl√©s s√©curis√©es pour Photobooth")
    print("=" * 50)
    
    # G√©n√©rer les cl√©s
    secret_key = generate_secret_key(64)
    bcrypt_salt = generate_bcrypt_salt()
    jwt_secret = generate_jwt_secret()
    redis_password = generate_redis_password()
    
    print(f"üîë Cl√© secr√®te: {secret_key}")
    print(f"üßÇ Salt bcrypt: {bcrypt_salt}")
    print(f"üé´ Secret JWT: {jwt_secret}")
    print(f"üì° Mot de passe Redis: {redis_password}")
    
    # G√©n√©rer un mot de passe admin s√©curis√©
    admin_password = secrets.token_urlsafe(16)
    admin_password_hash = hash_password(admin_password)
    
    print(f"üë§ Mot de passe admin: {admin_password}")
    print(f"üîí Hash du mot de passe: {admin_password_hash}")
    
    # Cr√©er le fichier de configuration s√©curis√©
    config_content = f"""# Configuration s√©curis√©e g√©n√©r√©e automatiquement
# ATTENTION: Ne pas commiter ce fichier dans Git !

security:
  secret_key: "{secret_key}"
  bcrypt_rounds: 12
  session_timeout: 3600
  
  # Configuration CORS restrictive
  allowed_origins:
    - "https://votre-domaine.com"
    - "https://www.votre-domaine.com"
  
  allowed_hosts:
    - "votre-domaine.com"
    - "www.votre-domaine.com"
  
  # Limitation de d√©bit
  rate_limit_requests: 50
  rate_limit_window: 60
  max_login_attempts: 3
  lockout_duration: 600

admin:
  username: "admin"
  password_hash: "{admin_password_hash}"

redis:
  host: "localhost"
  port: 6379
  db: 0
  password: "{redis_password}"
  ssl: false

# Variables d'environnement √† d√©finir
environment_variables:
  SECRET_KEY: "{secret_key}"
  ADMIN_PASSWORD: "{admin_password}"
  REDIS_PASSWORD: "{redis_password}"
  JWT_SECRET: "{jwt_secret}"
"""
    
    # Sauvegarder la configuration
    config_file = Path("config/secure_config.yaml")
    config_file.parent.mkdir(exist_ok=True)
    
    with open(config_file, 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print(f"\n‚úÖ Configuration sauvegard√©e dans {config_file}")
    print("\n‚ö†Ô∏è  IMPORTANT:")
    print("1. Changez le mot de passe admin par d√©faut")
    print("2. Ne commitez jamais ce fichier dans Git")
    print("3. Utilisez HTTPS en production")
    print("4. Configurez un pare-feu appropri√©")
    print("5. Surveillez les logs de s√©curit√©")
    
    # Cr√©er un fichier .env s√©curis√©
    env_content = f"""# Variables d'environnement s√©curis√©es
# ATTENTION: Ne pas commiter ce fichier !

SECRET_KEY={secret_key}
ADMIN_PASSWORD={admin_password}
REDIS_PASSWORD={redis_password}
JWT_SECRET={jwt_secret}

# Configuration de production
DEBUG=false
HOST=0.0.0.0
PORT=8000

# S√©curit√©
SESSION_TIMEOUT=3600
BCRYPT_ROUNDS=12
MAX_LOGIN_ATTEMPTS=3
LOCKOUT_DURATION=600

# CORS restrictif
ALLOWED_ORIGINS=https://votre-domaine.com,https://www.votre-domaine.com
ALLOWED_HOSTS=votre-domaine.com,www.votre-domaine.com
"""
    
    env_file = Path("config/.env.secure")
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print(f"\n‚úÖ Variables d'environnement sauvegard√©es dans {env_file}")
    print("\nüöÄ Votre application est maintenant configur√©e de mani√®re s√©curis√©e !")

if __name__ == "__main__":
    main()
